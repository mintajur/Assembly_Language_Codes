.MODEL SMALL
.STACK 100H
.DATA

.CODE    

;INITIALIZATION ON THE MAIN PROCEDURE 
MAIN PROC
    MOV AX, @DATA
    MOV DS, AX 
    
    MOV AH, 2        ; SIMPLY DISPLAYING ?
    MOV DL, '?'
    INT 21H 
    
    CALL INPUT               ;CALLING THE INPUT PROCEDURE   AND IT BY DEFAULT PERFORM PUSH OPERATION TO THE STACK
    CALL NEWLINE             ;CALLING THE NEWLINE PROCEDURE AND IT BY DEFAULT PERFORM PUSH OPERATION TO THE STACK
    CALL OUTPUT              ;CALLING THE OUTPUT PROCEDURE  AND IT BY DEFAULT PERFORM PUSH OPERATION TO THE STACK
    
    
    MOV AH, 4CH              ; GOOD PRACTICE TO GIVE THIS IN THE MAIN PROCEDURE ONLY
    INT 21H
    
                             ; ENDING MAIN PROCEDURE
MAIN ENDP
    
   
   
;INITIALIZATION ON THE INPUT PROCEDURE 
INPUT PROC
    
   MOV AX, @DATA
   MOV DS, AX 
     
 
   POP BX                    ; CLEARING THE BX REGISTER
   MOV CX, 0                 ; INTIALIZING THE VALUE OF COUNTER REGISTER CX TO 0

   MOV AH,1                  ;TAKING INPUT FROM USERS
   INT 21H                   

WHILE_:                      ; CONDITION CHECKING
   CMP AL, 0DH               ; COMPARING WITH ENTER PRESS
   JE END_INPUT              ; IF IT'S EQUAL THEN NO MORE INPUTS WILL BE TAKEN
   PUSH AX                   ; STORING INPUT TO AX REGISTER

   INC CX                    ; INCREMENTING COUNTER REGISTER VALUE

   INT 21H

   JMP WHILE_                ;THIS WILL JUMP TO WHILE_ AND PERFORM WHILE_'S STATEMENTS AGAIN 

  END_INPUT:                 ; THIS LEVEL WILL END THE INPUT TAKING
   PUSH BX                   ; AS WE ARE USING RET WHICH BY DEFAULT POP THE STACK, WE ARE PUSHING SOMETHING TO BX 
   RET
                             ; ENDING INPUT PROCEDURE 
INPUT ENDP 




NEWLINE PROC
    
   MOV AX, @DATA
   MOV DS, AX  
   
   MOV AH, 2
   MOV DL, 10
   INT 21H 

   MOV AH, 2
   MOV DL, 13
   INT 21H
   
   RET  
   
NEWLINE ENDP




OUTPUT PROC
    
   MOV AX, @DATA
   MOV DS, AX  

   POP BX
   JCXZ EXIT 
   
   
   
   MOV AH, 2 

   PRINT:
   POP DX
   INT 21H
   LOOP PRINT 

  EXIT:
  PUSH BX
  RET
OUTPUT ENDP